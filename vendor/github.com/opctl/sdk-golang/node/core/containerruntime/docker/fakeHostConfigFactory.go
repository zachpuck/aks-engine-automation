// Code generated by counterfeiter. DO NOT EDIT.
package docker

import (
	"sync"

	"github.com/docker/docker/api/types/container"
	"github.com/docker/go-connections/nat"
)

type fakeHostConfigFactory struct {
	ConstructStub        func(containerCallDirs map[string]string, containerCallFiles map[string]string, containerCallSockets map[string]string, portBindings nat.PortMap) *container.HostConfig
	constructMutex       sync.RWMutex
	constructArgsForCall []struct {
		containerCallDirs    map[string]string
		containerCallFiles   map[string]string
		containerCallSockets map[string]string
		portBindings         nat.PortMap
	}
	constructReturns struct {
		result1 *container.HostConfig
	}
	constructReturnsOnCall map[int]struct {
		result1 *container.HostConfig
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *fakeHostConfigFactory) Construct(containerCallDirs map[string]string, containerCallFiles map[string]string, containerCallSockets map[string]string, portBindings nat.PortMap) *container.HostConfig {
	fake.constructMutex.Lock()
	ret, specificReturn := fake.constructReturnsOnCall[len(fake.constructArgsForCall)]
	fake.constructArgsForCall = append(fake.constructArgsForCall, struct {
		containerCallDirs    map[string]string
		containerCallFiles   map[string]string
		containerCallSockets map[string]string
		portBindings         nat.PortMap
	}{containerCallDirs, containerCallFiles, containerCallSockets, portBindings})
	fake.recordInvocation("Construct", []interface{}{containerCallDirs, containerCallFiles, containerCallSockets, portBindings})
	fake.constructMutex.Unlock()
	if fake.ConstructStub != nil {
		return fake.ConstructStub(containerCallDirs, containerCallFiles, containerCallSockets, portBindings)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.constructReturns.result1
}

func (fake *fakeHostConfigFactory) ConstructCallCount() int {
	fake.constructMutex.RLock()
	defer fake.constructMutex.RUnlock()
	return len(fake.constructArgsForCall)
}

func (fake *fakeHostConfigFactory) ConstructArgsForCall(i int) (map[string]string, map[string]string, map[string]string, nat.PortMap) {
	fake.constructMutex.RLock()
	defer fake.constructMutex.RUnlock()
	return fake.constructArgsForCall[i].containerCallDirs, fake.constructArgsForCall[i].containerCallFiles, fake.constructArgsForCall[i].containerCallSockets, fake.constructArgsForCall[i].portBindings
}

func (fake *fakeHostConfigFactory) ConstructReturns(result1 *container.HostConfig) {
	fake.ConstructStub = nil
	fake.constructReturns = struct {
		result1 *container.HostConfig
	}{result1}
}

func (fake *fakeHostConfigFactory) ConstructReturnsOnCall(i int, result1 *container.HostConfig) {
	fake.ConstructStub = nil
	if fake.constructReturnsOnCall == nil {
		fake.constructReturnsOnCall = make(map[int]struct {
			result1 *container.HostConfig
		})
	}
	fake.constructReturnsOnCall[i] = struct {
		result1 *container.HostConfig
	}{result1}
}

func (fake *fakeHostConfigFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.constructMutex.RLock()
	defer fake.constructMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *fakeHostConfigFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
