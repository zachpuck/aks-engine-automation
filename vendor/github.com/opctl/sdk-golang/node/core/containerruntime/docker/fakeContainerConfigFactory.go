// Code generated by counterfeiter. DO NOT EDIT.
package docker

import (
	"sync"

	"github.com/docker/docker/api/types/container"
	"github.com/docker/go-connections/nat"
)

type fakeContainerConfigFactory struct {
	ConstructStub        func(cmd []string, envVars map[string]string, image string, portBindings nat.PortMap, workDir string) *container.Config
	constructMutex       sync.RWMutex
	constructArgsForCall []struct {
		cmd          []string
		envVars      map[string]string
		image        string
		portBindings nat.PortMap
		workDir      string
	}
	constructReturns struct {
		result1 *container.Config
	}
	constructReturnsOnCall map[int]struct {
		result1 *container.Config
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *fakeContainerConfigFactory) Construct(cmd []string, envVars map[string]string, image string, portBindings nat.PortMap, workDir string) *container.Config {
	var cmdCopy []string
	if cmd != nil {
		cmdCopy = make([]string, len(cmd))
		copy(cmdCopy, cmd)
	}
	fake.constructMutex.Lock()
	ret, specificReturn := fake.constructReturnsOnCall[len(fake.constructArgsForCall)]
	fake.constructArgsForCall = append(fake.constructArgsForCall, struct {
		cmd          []string
		envVars      map[string]string
		image        string
		portBindings nat.PortMap
		workDir      string
	}{cmdCopy, envVars, image, portBindings, workDir})
	fake.recordInvocation("Construct", []interface{}{cmdCopy, envVars, image, portBindings, workDir})
	fake.constructMutex.Unlock()
	if fake.ConstructStub != nil {
		return fake.ConstructStub(cmd, envVars, image, portBindings, workDir)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.constructReturns.result1
}

func (fake *fakeContainerConfigFactory) ConstructCallCount() int {
	fake.constructMutex.RLock()
	defer fake.constructMutex.RUnlock()
	return len(fake.constructArgsForCall)
}

func (fake *fakeContainerConfigFactory) ConstructArgsForCall(i int) ([]string, map[string]string, string, nat.PortMap, string) {
	fake.constructMutex.RLock()
	defer fake.constructMutex.RUnlock()
	return fake.constructArgsForCall[i].cmd, fake.constructArgsForCall[i].envVars, fake.constructArgsForCall[i].image, fake.constructArgsForCall[i].portBindings, fake.constructArgsForCall[i].workDir
}

func (fake *fakeContainerConfigFactory) ConstructReturns(result1 *container.Config) {
	fake.ConstructStub = nil
	fake.constructReturns = struct {
		result1 *container.Config
	}{result1}
}

func (fake *fakeContainerConfigFactory) ConstructReturnsOnCall(i int, result1 *container.Config) {
	fake.ConstructStub = nil
	if fake.constructReturnsOnCall == nil {
		fake.constructReturnsOnCall = make(map[int]struct {
			result1 *container.Config
		})
	}
	fake.constructReturnsOnCall[i] = struct {
		result1 *container.Config
	}{result1}
}

func (fake *fakeContainerConfigFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.constructMutex.RLock()
	defer fake.constructMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *fakeContainerConfigFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
