// Code generated by counterfeiter. DO NOT EDIT.
package docker

import (
	"io"
	"sync"
)

type fakeContainerLogStreamer struct {
	StreamStub        func(containerID string, dst io.Writer) error
	streamMutex       sync.RWMutex
	streamArgsForCall []struct {
		containerID string
		dst         io.Writer
	}
	streamReturns struct {
		result1 error
	}
	streamReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *fakeContainerLogStreamer) Stream(containerID string, dst io.Writer) error {
	fake.streamMutex.Lock()
	ret, specificReturn := fake.streamReturnsOnCall[len(fake.streamArgsForCall)]
	fake.streamArgsForCall = append(fake.streamArgsForCall, struct {
		containerID string
		dst         io.Writer
	}{containerID, dst})
	fake.recordInvocation("Stream", []interface{}{containerID, dst})
	fake.streamMutex.Unlock()
	if fake.StreamStub != nil {
		return fake.StreamStub(containerID, dst)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.streamReturns.result1
}

func (fake *fakeContainerLogStreamer) StreamCallCount() int {
	fake.streamMutex.RLock()
	defer fake.streamMutex.RUnlock()
	return len(fake.streamArgsForCall)
}

func (fake *fakeContainerLogStreamer) StreamArgsForCall(i int) (string, io.Writer) {
	fake.streamMutex.RLock()
	defer fake.streamMutex.RUnlock()
	return fake.streamArgsForCall[i].containerID, fake.streamArgsForCall[i].dst
}

func (fake *fakeContainerLogStreamer) StreamReturns(result1 error) {
	fake.StreamStub = nil
	fake.streamReturns = struct {
		result1 error
	}{result1}
}

func (fake *fakeContainerLogStreamer) StreamReturnsOnCall(i int, result1 error) {
	fake.StreamStub = nil
	if fake.streamReturnsOnCall == nil {
		fake.streamReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.streamReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *fakeContainerLogStreamer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.streamMutex.RLock()
	defer fake.streamMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *fakeContainerLogStreamer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
