// Code generated by go-bindata.
// sources:
// github.com/opctl/specs/opspec/opfile/jsonschema.json
// DO NOT EDIT!

package dotyml

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _githubComOpctlSpecsOpspecOpfileJsonschemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3d\x69\x73\xdb\xb8\x92\xdf\xf3\x2b\xba\x34\x99\x1d\x7b\x13\x49\x76\xe6\x25\xf3\x9e\xa7\x52\x29\x4f\x8e\xdd\x6c\x4d\x8e\x9a\x1c\x5b\x35\xb6\x93\x82\x44\xc8\xc2\x98\x04\x18\x10\xf4\x31\xbb\xf9\xef\xaf\x00\xf0\x12\x05\x80\x10\x45\x5a\x76\x22\x7f\x49\x44\x36\x9a\x8d\xbe\xd0\x68\x34\x80\xff\xbb\x03\x30\xb8\x9b\x4c\xe7\x38\x42\x83\x03\x18\xcc\x85\x88\x0f\xc6\xe3\xbf\x12\x46\x87\xfa\xe9\x88\xf1\xd3\x71\xc0\xd1\x4c\x0c\xf7\x7e\x19\xeb\x67\x3f\x0c\xee\xab\x76\x24\xc8\xdb\x24\x07\xe3\x31\x8b\x93\x18\x4f\x47\x84\x8d\xf7\x46\xfb\xa3\x5f\xc6\x2c\x1e\x5d\x45\xe1\x28\x43\x23\x51\xea\x66\x82\x88\x10\xcb\x86\x6f\x62\x78\x41\x42\xac\x9f\x06\x38\x99\x72\x12\x0b\xc2\xa8\x7c\xf7\x0c\xcf\x08\xc5\x09\x20\x0a\x2c\xd6\x10\x31\x67\x31\xe6\x82\xe0\x64\x70\x00\x92\x70\x80\x01\x45\x11\x2e\x7e\x2d\x63\x79\x8d\x22\x0c\x6c\x06\x62\x8e\x73\x34\x0a\x4c\x5c\xc5\x8a\x82\x44\x70\x42\x4f\x07\xea\xf1\x57\xfd\xb6\x86\xc2\x86\xf9\x59\xf9\xd3\xf4\x81\xbb\x1c\xcf\x24\xd8\x0f\xe3\x92\xea\x31\xa1\x71\x2a\x92\x71\x8c\x84\xc0\x9c\xbe\x2d\x5f\xfc\xf8\xf0\xb7\xe1\xe7\x11\x1a\xfe\x7d\x38\xfc\x73\x6f\xf8\xaf\x1f\x1f\x3e\xfb\xf1\xc1\x6f\xd5\x96\x01\xe1\x0b\x3f\x2b\xb4\x2c\xd0\xae\xbf\x50\x25\x1b\x05\x01\x91\x70\x28\x7c\x5b\x65\xdf\x0c\x85\x09\xbe\x6f\xe9\xdb\x5b\xc4\x51\x84\x05\xe6\xb2\x67\xa5\x00\x14\xe8\x12\xf1\x95\x8f\x01\x0c\x8e\xaa\xfd\x38\xb9\xb7\xf0\x12\x60\xc0\x28\x7e\x23\xf9\x72\x54\x79\x08\x0b\x20\x0a\x8c\xe3\x2f\x29\xe1\x38\x58\x82\xd4\x5d\xe2\x1c\x5d\x0d\x6a\xcf\x4f\x16\x7e\x7f\xbd\xbf\xce\x07\x26\x8c\x85\x18\xd1\x3e\x3f\x11\x10\xde\x27\xfa\x99\x34\xab\x1e\xf1\xd3\x34\x9a\xe0\x5e\x7b\xc0\x26\x7f\xe1\xa9\xe8\xf3\x0b\x09\x9b\x9e\xe1\x7e\xbf\x50\xf1\x2e\xd6\x2f\x54\x7e\x9d\x54\xbf\x66\x72\x77\xc5\x3b\x6d\x02\xf5\xc7\x9e\xe6\x5e\x00\x17\x8e\x58\xa1\x53\x56\x3f\x58\x02\xaa\xf9\x86\x43\x09\x0a\xb1\xdd\x43\xf8\xd0\x6f\x40\xbc\x0c\x70\xfd\x5e\x74\x41\x2e\xf5\xfe\x28\x8a\x67\x28\x0d\x85\x8d\xda\x7c\x50\x31\xfa\x27\x33\x46\x92\xbc\xc3\x53\x8e\xad\x28\x6b\xcc\x7f\xa9\x07\x1a\xf5\x01\x20\x09\x24\xba\xf1\x32\xe2\x0a\x35\x16\x67\x66\xa6\x67\xca\x68\x22\x38\x22\x54\x98\x85\xb6\xa4\x34\x4f\x2b\x0d\x9c\x64\x64\xf6\x6c\x84\x69\xd0\x14\x58\x54\xec\x97\x02\x47\x76\xc0\x65\xa6\xfd\xcf\xbb\x37\xaf\xe1\x9d\x0a\x42\xe0\xa8\x86\x06\xce\xf0\xd5\x05\xe3\xc1\xc9\x4e\x1e\xc4\x08\xc6\xc2\x64\x44\xb0\x98\xa9\xc0\x67\x2e\xa2\x30\x8b\x7e\x2e\x38\x39\x9d\x8b\x61\x25\x34\x1a\x9e\xa3\x90\x04\x48\xe2\x1b\xee\xed\xff\x90\xe0\xa9\xfa\xef\xa3\xd1\xfe\xde\xae\xb1\xa7\xd0\x83\x52\x6b\xc6\x56\x9f\x54\x84\x58\x7d\x5c\xf9\xaf\xd1\x4b\x18\xe9\x35\x28\x89\xea\x04\x59\x47\x08\xa4\x47\xd6\xff\xcb\xc1\x79\x44\xaf\x0c\xd1\x47\xf5\xcf\xd6\x9d\xdb\x27\x38\x87\xf0\x1a\x3b\xda\x24\xdc\xdb\xca\x8f\xc5\xd1\xd6\xef\xcd\xc9\x4a\x66\x11\xa1\xcb\xb5\xdc\x53\xde\xbe\x43\xe3\xd8\x2b\x8c\xe3\xa1\xdb\x2f\xe5\x9e\x9a\x50\x81\x4f\x31\xb7\x03\x46\x84\x92\x28\x8d\x06\x07\xb0\xb7\x1a\x73\x08\x5d\x8f\x39\x59\xfb\xbe\x98\xb3\xbf\x49\xe6\xa4\x94\x7c\x49\xf1\x5a\xfc\xa9\xa0\xe8\x6b\x5c\xfb\xd9\x83\x45\xd6\x80\x03\x2c\x66\x66\x64\x89\x33\x92\x5d\x8e\x65\xee\x34\xa0\xac\xc7\x21\xae\x28\xbf\xe8\x41\x67\xf1\x75\x86\xd0\x2f\xc2\xfe\x4d\x03\x6f\x63\x6c\x8f\x80\xf8\x99\x86\x86\x73\x14\xa6\xb8\x6d\x1c\xdc\xa9\xee\xc8\x89\x7d\x67\x7a\x13\x10\xee\xa7\x33\xcf\x08\xc7\x53\xc1\xf8\xb5\xcd\xcc\x0a\x12\x23\xc4\xcf\x02\x76\x41\xcd\xcc\xaf\x91\xf9\x2a\x03\x06\x42\xe1\xe8\x7c\x6f\xf4\xe0\x9f\xf0\x94\x45\x11\xa3\xf2\x05\x24\x57\x54\xa0\x4b\xed\xb2\x0e\xc6\x63\x95\x4c\x9c\xaa\xd7\xf2\x23\xca\x6d\xc9\x26\xe3\x5d\x20\x74\x1a\xa6\x01\xa1\xa7\xf0\x5f\x2f\x5e\x81\x40\x93\x10\x03\xbe\x14\x98\x26\x84\x59\x28\x31\x65\xfc\x1c\x72\x84\x35\x75\xf1\x57\xc9\x7b\x34\x49\x58\x98\x0a\x0c\x31\x12\x73\xe0\x8c\x09\x1c\x00\x12\x10\x10\x0e\x53\x46\x05\x22\x54\xf6\x41\xe7\x49\x81\xf1\xfb\x80\x80\xe3\x10\x09\x72\x9e\xb5\x91\xc3\x0d\x8f\x39\x96\x0d\x67\x9c\x45\x70\x31\xc7\x1c\x67\xd9\x46\x35\x03\x14\x88\x0b\x1c\x74\xd7\xe7\x76\x33\xd2\xa0\xd0\xbf\xb5\x67\xa5\x9d\x5a\xa3\xca\x83\x75\x66\x8e\x12\x9b\x9f\x3d\xbe\x20\x21\xde\x3a\xf0\xad\xd1\x98\x3b\x9d\x19\x8d\x54\xa7\x1b\x66\x2f\x59\x5e\xb7\x33\x8b\xd1\xf8\xfc\x6c\xe6\xb5\x82\xdd\x5a\x8d\x4b\x0d\xcc\x79\xf7\x2e\x95\x52\x7f\x61\xe3\xc9\x45\x4d\xc6\xf5\x65\x17\xc3\x50\x65\x86\xda\xe5\x14\x65\xe3\x9e\x26\xa5\x0f\x1e\x78\xcc\xb8\x74\xc2\xd9\x0a\xd6\x9c\xce\xe9\xda\x1a\xb4\xf4\x2c\xa9\x1c\x5b\x7e\xc6\x9c\x81\xb1\xcd\x97\xf3\x5c\x5e\x3b\x89\xc9\xc6\x7d\x49\xcc\x67\x8e\xfc\x3d\x4a\x0c\x53\x95\x16\x69\x25\x30\xd9\xb6\x2f\x79\xf9\xe4\xc4\xd6\x97\x57\x93\x07\xcf\x78\xb7\x12\x47\x67\x8c\x47\xc8\xe6\xdf\x15\x84\x79\xbd\xbd\xfa\xe7\x4c\x04\x17\xee\xb8\x29\xed\x05\x06\x01\xfe\xa1\xd7\x46\x93\xea\xb0\x32\xc1\x72\x48\xf7\xc2\x56\x8b\xc3\x9c\xb0\x99\x6a\xd9\x7b\xa9\xa0\xf2\xcf\x3a\xa0\xcc\xd9\x5e\xe8\x32\x3f\x9c\x65\x07\xdb\xa6\x87\x65\xf3\xbe\x2c\xc1\xc3\x10\x5c\xea\xeb\xc8\xfb\xae\xd5\x69\xdd\xbc\xa7\x4e\xff\xa3\xaf\x4e\xa7\xa1\x20\x71\x88\xdb\x0f\x52\x25\x86\xbe\x12\xde\x3d\x75\x9d\x32\xa7\x4f\x72\xf5\x99\x32\xd1\x97\x72\x3f\xbc\xbe\x25\xd9\x16\x83\xa9\x8d\x97\xb9\x03\x6f\xc5\x4d\xd5\xb8\x2f\x7e\xfa\x18\xce\x37\x1d\xe6\x18\x9e\xde\xb8\x95\x8c\x0c\xa6\xb3\xf9\xbc\xc6\xe7\x37\x9f\x7f\xa3\x60\xb7\xf3\x79\x8f\x79\x6b\x8f\xf3\x79\xfd\x85\x8d\xcf\xe7\x35\x19\x1b\xa8\x16\xb2\x14\xaa\xba\x79\x67\x29\x19\x2a\x71\xad\xe2\x54\xe7\x88\x06\x1c\x5f\x24\x1e\x6e\xf5\xd1\xe8\xe1\xe8\x91\xc3\xaf\xae\x1b\xce\xfb\xac\xd0\xc2\x1a\x85\x23\xb7\xae\x22\xa4\x9b\xa8\x7e\x9b\x3d\xba\x3e\xb1\x6f\xb3\x47\xdf\xa7\xc4\x02\x1c\x63\x1a\x60\x3a\x5d\xc3\x93\x57\x71\xf4\x35\xa7\x72\xd5\x1f\xae\xe9\xbe\x6f\x9f\x77\xed\xb7\xfe\xb0\x69\xa5\xae\x42\x48\xcf\x03\xc0\x36\xb5\xd9\x90\x7d\x1b\xd0\x34\x0c\xdd\x39\x3c\x5b\x28\x9c\xff\xd9\x52\x73\xab\xb9\x91\x08\x5d\xae\x1f\x11\x2e\x20\xe9\xcb\x91\xf8\x0c\x04\x7d\x96\x6a\x76\xc0\xa6\x2a\x92\xbe\xd8\xe4\x93\x86\xe8\x8d\x4d\xdf\x7d\xa6\xab\xc5\xc0\xbf\xcd\x74\xdd\x54\xc9\xac\xea\x4b\x3d\x26\xe2\x0d\x62\x8b\x7b\x77\x0f\xae\xd9\xb4\x47\xb2\x01\x5a\x24\x13\xaa\x69\x0f\xf9\x89\xa6\xa4\x87\x99\x4f\xe5\x1e\xdc\xa9\x5f\xfb\xe6\xcd\x2d\xee\xa8\xcb\x57\xa0\x16\x82\x9b\xc0\x1b\x43\xf3\xe2\x5d\xa7\x2a\xf0\xc8\xb5\xca\x51\xa1\xcd\x3f\x96\x04\x77\x60\x9b\xe3\xcb\x34\x60\x4d\xb6\x28\x34\xdf\x06\x43\x34\xbe\x75\xf9\x71\x15\x77\xcb\x8e\x87\xa3\x07\x2b\xf1\xc3\xbd\xc4\x9c\xc1\xba\x07\x83\x05\x50\x3f\xf6\xba\x16\xa6\xf5\x5f\xb3\x00\x2e\x38\x11\xf8\x0d\x0d\x4d\xdb\x86\x0d\xe0\x2e\x29\x14\xa8\x3a\x4e\x7f\xee\xef\x8d\x1c\x51\x6f\x85\x38\xef\x44\x66\xc6\x1c\xe7\x7b\xd7\x5b\x27\x5b\xaf\x77\x7b\x9c\x52\xaa\x15\xc7\xf3\x1b\xd6\x85\x56\xab\x6f\x37\xac\x0f\xad\xe2\xaa\x1b\xd6\x07\xed\x74\xda\xf4\xa1\xe7\xd9\xb9\xfb\x70\x91\x1a\xb0\x33\xb0\xac\x23\xea\x2b\xbe\xfc\x65\x23\xf1\xe5\x2d\xcb\x04\xae\xa6\x04\x95\x33\x35\x5a\xc9\x3e\x6f\xdf\x97\xc8\x5d\xd3\xeb\xee\xeb\x05\xdd\x01\xc2\x2d\x2e\x4d\xc8\x8e\x5f\xe9\xac\x34\x41\xe3\xf3\x2b\x4d\x78\xa7\x60\xbf\xd3\xd2\x84\x76\x75\x04\x9a\xbd\x37\x6c\xbb\x4a\x66\x1c\xdd\xe9\x90\xc2\xe7\xa9\x43\x0a\xf6\x3b\xd5\x21\xcf\xf2\x96\xfe\xf7\x50\xe9\x2f\x6c\xbc\xbc\x45\x93\xb1\xdd\xae\x72\x3b\x0b\x0e\x5a\xc5\xc3\xdb\x82\x83\x02\xec\x9b\x94\xd8\x76\x4d\xb7\x75\xf8\xd9\x7a\xbb\x4a\x7d\x88\x4d\x63\xcc\x13\x2c\xe4\xd0\xba\xc0\x5f\x8d\xa9\x17\x0e\xbb\x26\x74\x5d\xed\xa6\x09\x90\xc0\x43\x41\x22\xf3\x89\x15\x36\x6e\x2c\xe6\xcb\x73\x14\xa0\x79\xd1\x2d\x0f\x46\x3f\x37\x65\x89\x7b\xd8\x9e\x53\x72\xc5\x01\xe7\xd8\xa0\xd3\xb2\xd8\xa4\x94\x8a\x8c\x70\xf9\x90\x44\xe8\x14\x0f\xa5\xbb\x5a\x45\x38\x87\xa0\x9b\x83\x6a\x0e\x1c\xcf\x30\xc7\x74\x8a\x01\x25\x10\xa8\xa3\x6c\x03\x98\x5c\xc1\xd1\x29\x11\xf3\x74\x32\x9a\xb2\x68\xac\x1b\x8c\x03\x22\x59\x38\x49\x25\xa6\x71\xd1\xae\x94\x67\x43\x0b\xc1\x31\xce\x5f\xec\x8f\xf6\x7f\x2e\x51\x5c\xbf\x00\xeb\x0c\xdc\x8c\x1c\x71\x84\x48\x43\xad\x89\xd3\x77\xcb\xe6\x7d\x59\x95\x23\x3c\x82\x7e\x84\xa2\xb9\xb1\x19\x49\xcc\x59\x22\xd4\x01\xcd\xad\x85\x91\x63\xe8\x4b\x1e\x0d\xcb\x0d\x3d\xc8\xa3\xe0\xc9\x66\x44\x42\xe2\xf3\x7f\xb4\x17\x87\x6c\xdd\x97\x28\x1c\x55\x16\xd0\x8f\x28\x14\x2f\x36\x26\x86\x47\x6b\x89\xe1\x51\x5f\x62\x70\x64\x37\xa1\x37\x31\x3c\xda\x90\x18\x52\x4e\xda\x4b\x21\xe5\xa4\x2f\x21\x38\xaa\x56\xa0\x1f\x21\x48\x4e\x6c\x46\x06\x09\x8e\xce\x57\xdc\x59\x7e\x08\x09\x8e\x10\x15\x64\x0a\xe7\x98\x27\x84\xd1\x7a\x98\xa5\x91\x4a\x19\x94\xc7\x89\x15\x8f\xc6\xd7\xce\xdd\xac\x8f\xed\x18\x6c\x79\xb3\xf2\xc6\xf3\xdf\x31\x3d\x15\xf3\x35\x6a\x5e\x35\x82\x9e\xe6\xb5\x3e\x85\x5a\x2b\xd4\x71\xee\xaf\xc6\x1d\x42\xd7\xe4\x4e\x8e\xa0\x27\xee\xf8\x2c\x33\xae\x52\xe5\x6a\x85\x29\x13\xbb\xdb\x4a\xd8\xbe\x33\x52\xdb\x4a\xd8\x9b\x2a\x99\x96\x75\x0b\x6b\x56\x2b\xf4\x24\xb5\x7f\x7a\x08\xad\x61\xa8\x2b\x53\x77\x03\x8e\x4f\xf1\xe5\x6d\x3a\xdb\xf7\x8e\xa5\xa5\xb5\x55\xde\xa2\x80\x36\x42\xe6\x37\xee\xb0\x54\xd4\xaf\xdc\x71\xe8\xef\x62\x5b\x9e\xd2\x75\xaf\xea\x39\x84\x84\xd0\xd3\x10\x03\x65\x41\x71\xd3\xd1\xd1\x14\x85\x21\x9c\x72\x14\xcf\x4b\x5d\xc2\x74\x74\x41\xce\x48\x8c\x03\xa2\xef\x74\x92\xbf\xc6\x4f\x51\x18\x7e\x56\x90\xa5\x96\x18\xf2\x9c\x55\xb5\xb6\x5f\x7a\x32\xc8\xce\x67\x5c\x0c\x75\xca\x40\xa5\xc2\x7f\x4f\x84\x2c\xee\x0a\x53\x8c\x38\x0a\x43\x1c\x76\x85\x2f\xc1\x9c\x20\x1b\xb6\xec\x7f\xc5\x7d\x2e\xb6\x45\xbd\x0a\xc3\x6a\x17\x25\x15\xe1\x71\x01\x21\x25\x35\x70\x29\xf0\xc2\x3b\xd7\xe5\x31\xd3\xc8\x54\x5b\x53\xd7\xac\xa7\x2c\x8a\x10\x0d\x80\xa7\x54\x86\xd4\x08\x0a\x4a\x7e\x05\x76\x8e\x39\x27\x81\xba\x9e\xeb\x0a\x12\x2c\x00\x09\xa5\x79\x3a\xfb\x19\xe2\x73\xbc\x9c\x81\x6b\x18\x21\x1c\x23\x43\x9d\xb4\xe7\x97\x31\xc7\x89\x8a\xfb\xa7\x0c\xf3\x29\x99\x84\x18\x04\xcb\x17\x83\x6d\x87\x41\x9b\x0d\x93\xa7\x74\xa1\x16\x2a\x1e\x2b\xf5\x1f\xef\xad\x31\xfa\x68\x0c\xfb\x75\x37\xb9\xe8\xc9\x0c\x27\x47\x9b\xba\xdf\xb4\x68\x6c\x3b\x0a\x9a\xe0\x04\x08\x55\x52\x29\xb5\x6c\xb9\x34\xc1\xab\xe2\x6e\xf0\x69\xe7\x48\xf7\xf1\xe4\x60\xf7\xc9\xd1\xf0\xf3\xe8\xf8\x78\x5c\xb9\xe6\xeb\xae\x6d\x81\xdc\xbd\x62\xe2\x3b\x58\xee\x5c\x90\x30\x84\x09\x86\x09\x4b\x69\xa0\x24\x8d\xa2\xe2\xb0\x57\x60\xb1\xd7\x41\x46\xa1\x25\x0d\x6a\x19\xd4\x7d\x89\xb3\x29\x63\x40\xb8\xd6\x44\xf8\x8f\x31\xe3\x90\x4c\x59\xac\xd6\x05\x14\xf9\x58\x40\x1a\x33\x0a\xf8\x92\x38\x0a\x03\x37\xad\xaf\x19\x7f\x0c\x4f\x97\x27\x9f\xcd\xa3\xb4\xf7\xa0\x5f\x37\x0c\x4c\xcf\x3f\xa2\x4e\x6c\xe3\x39\x3d\x27\x9c\xd1\x08\x53\x01\xe7\x88\x13\x34\x09\x3b\xb5\x92\xa3\x4f\x8f\x37\x60\x0c\x84\x56\xb4\xeb\x62\xac\x8d\x83\xa2\xc8\xb1\x02\xb4\x39\xb3\x68\xf0\xd1\x19\xb2\xad\xe6\xab\x86\x33\x12\x1a\x75\x6d\x55\xbd\x7f\x41\xba\xd5\xf3\xed\x68\x60\x23\xce\xa6\xf6\xea\xac\xef\xed\x70\x50\xe9\x4d\x6b\xa3\x50\x31\x66\x1b\xa3\x68\x2a\xc3\xd4\xec\xf5\x29\x3e\xfc\xa3\x58\xde\x17\x4c\x1d\x68\xaa\x48\x32\x4e\x75\x37\x2f\x34\x53\x6d\x63\x9c\x86\xe1\x53\x8e\x03\x6b\x65\x63\x7b\xb2\x4b\xd4\x2d\x94\xc2\x7d\x9f\xa6\xa1\xa6\xe0\xa4\x3b\xbd\xaa\x5d\x25\x5c\x3c\x37\x5d\x29\xbc\xe0\x47\x61\x8a\xa8\xf4\x47\x45\xe5\x85\x5a\x83\x50\x37\x0f\x30\x31\xc7\xbc\x84\x5c\x2e\x0b\x75\x16\x5a\xd5\x29\x8c\x19\x37\xd6\xa2\x2e\xed\x1d\x96\x70\x99\x7b\x54\x64\x2c\x92\x2b\x98\x7a\x30\x67\x89\xc1\x48\x1a\x8d\xc8\x6f\x88\x38\x52\x23\xc1\xce\x50\xff\xbb\xfb\x64\x47\x4c\xe3\xff\x4f\x83\x78\xf7\x89\xa7\x89\xfd\x37\x4b\x04\xc8\x0e\xef\x24\xbb\x92\xe2\x09\x51\xbe\xde\xeb\xce\x06\x73\x5d\x6d\x91\xa3\x5b\x22\xae\x8d\xa6\xb6\x56\x33\x5d\x48\xdf\x6a\x54\xf7\xe5\xfd\x81\xfd\x06\xe6\x02\x68\x69\xb6\x9f\x6b\x47\x56\xe8\x8f\x82\x40\x0e\x64\x10\xa1\x38\xc6\x6a\x94\x45\xf9\x2b\x5b\x6d\x54\x73\xd9\x77\x8f\x5c\x15\xc1\x73\x6e\xbc\xb8\xa2\x23\xa6\x7e\x1a\xd9\xe3\x1a\x3b\x2f\x45\x80\x39\x87\x98\xe3\x19\xb9\x5c\x64\xa5\x0e\x83\x7b\x64\x65\x80\x63\x8e\xa7\x48\x28\x67\x2a\x78\xba\xbc\xed\x61\x1d\x66\xbf\x49\x8d\x5b\x77\x36\xcc\x6c\x96\x8a\x6f\x8e\xd9\x17\x8c\x9f\x3d\x33\x5f\x2a\x56\x63\xc5\xff\x32\x7e\x26\xfb\x19\x54\x2e\x03\x13\x73\xd8\x59\xcc\xd6\x55\x96\xc9\x55\xd8\xb2\x1c\x2d\xbb\xc7\xa4\x3b\x16\x52\x1d\xb9\x52\x1d\x1e\x55\x9e\x2d\x5e\x74\xed\xc5\x9a\xca\xb7\x06\x21\x63\x71\x3d\x61\xea\x4a\x78\xce\x98\x91\x7d\x4d\xf1\x20\x46\x53\xdb\x82\xf0\xd2\x6e\x14\x81\xb9\xba\x85\xec\x62\x4e\xa6\x73\xc8\x67\x28\x44\x3e\x6e\xba\x69\xc8\x3c\x1b\x72\xae\xa3\x39\xca\xb2\x0d\xa1\xb8\x21\xfe\xd3\xd3\x6f\xbf\xbe\x7d\xcc\x12\x25\x2a\x68\xd0\x53\x18\x36\x03\xc9\x9c\xac\x7f\x72\xb2\x93\xf7\x38\x42\x01\x06\x74\x8e\x48\x98\x35\xe1\x2c\x3d\x9d\xf7\x65\x76\xee\x70\x51\xc9\xaf\x31\x5e\x5c\x65\xbf\x19\xa1\x01\xbe\x74\xf9\x3d\x9f\x28\x2e\xa5\x82\x84\x1e\xe6\xfc\x72\xa6\xec\x35\xe6\x38\x20\xd2\xb5\x00\x96\xcc\x47\x02\x27\x6a\x42\xa9\x56\x85\x94\x4c\xa4\x39\x68\x01\xc8\xf9\xe3\x08\xde\xe6\x2d\x12\x40\xbc\x6c\x16\xc0\x04\xcf\x98\x7a\x80\xf9\x55\x29\xbb\x51\x97\x99\x7a\x9f\x79\x03\x99\x8d\x35\x86\xba\x7c\x3d\x1d\x8d\x75\xe1\xae\xe2\x22\x48\x7d\x2a\xd7\x9a\xbb\x6a\x2d\x6d\x87\x71\x38\x56\x7e\xe7\x78\x50\x72\x6e\xb7\x50\xfb\xe4\x8c\xc8\xe1\x66\x64\x5e\xa0\x59\x66\xa3\x85\x85\x86\xc1\x4d\xbb\xc6\xcc\xaf\x2c\xd0\x28\x87\x19\x60\x5c\xd3\x5a\x13\x92\x35\xd5\x62\x9c\xf6\x3a\x8c\x48\x9a\xd1\x97\x65\xd3\xac\x7b\x99\x25\xd3\x6c\xf1\x1d\x6a\xa8\x89\x5d\xfa\xce\xc2\xef\x93\xfa\xfc\xc8\xe5\xd0\x65\x3f\x7c\x16\x97\xde\x4b\xb6\x92\x19\x48\xb1\xeb\x8b\xca\x95\x11\x7d\x49\x91\xa9\xa8\xbc\xb1\xec\xc1\x59\xf0\xd0\x59\xd2\xf4\x26\xa4\x19\x1a\xbd\x35\x35\x8f\x38\x56\x01\xd0\xab\x52\x00\xf4\x27\xb1\x95\xc1\xea\x32\x70\x0e\x44\xf6\x91\xef\xab\xd1\xa7\x2e\x07\x5d\x66\x2f\xd3\x79\x62\x2e\xab\x9d\xf0\x0c\xc5\x28\x11\x04\x85\xe4\x6f\x9c\xc0\xcb\xd7\x6f\x3f\xbc\xff\xfc\xfa\xf0\xd5\x73\x9d\x07\xf9\x78\xf8\xfb\x87\xe7\x40\x68\x56\xb7\x0b\x3f\x95\x00\x07\xfa\xe5\x4f\x23\x78\x39\xcb\xe1\x12\xa0\x69\x18\xde\x07\x22\xe0\xd5\x87\x77\xef\xd5\xed\x45\x49\x92\x46\x38\xc8\x20\x1e\x3f\x86\xbb\x3b\x25\x0e\x73\xe2\xd9\x6f\xd7\xaf\xf7\xc9\x27\x83\xa3\xaa\x46\x58\x27\xf8\x0e\xf9\x54\xff\xdc\x35\xba\x8d\xd9\x72\x58\xa3\x02\xd8\x6e\x77\x86\xc1\x0e\x35\xac\x18\x41\x63\x40\x5d\x40\xf9\x9c\xce\x55\xec\x14\x6f\x00\xcb\xae\xc7\x69\x80\x6a\x38\x00\x26\x83\x6a\x3e\x0a\xac\xb3\x22\x61\xc3\xd3\x2e\x0a\xb5\x0c\x9e\x77\xb9\x3c\x6a\xe1\xb5\xc3\x76\x4b\xab\x7d\xf3\xe1\x7d\x61\xc6\x15\xdb\xd5\x56\x5b\x79\xa9\x6d\x77\x01\xda\x61\xc1\x0a\xe0\xf1\xe3\x2a\xfc\xd6\x7c\x5b\x60\x6f\x52\xdb\x1b\xab\x9a\x8d\x6b\x20\x3e\x82\xaf\x07\xec\x1c\x07\x98\x4a\x1d\x4e\x20\x4d\x70\x00\x41\xaa\xa2\x06\x94\x8a\xb9\x7c\x3e\xcd\x67\xcb\x62\x9e\x9d\xaa\x92\xf2\x29\xce\x8e\x0e\xd1\xc5\x53\x8c\x9b\xce\x10\x01\x8f\x71\x52\xc1\xa4\x09\xe6\x96\x95\x0c\x1b\xd1\xdf\xc4\x52\xbd\xb5\x32\x37\x49\x2e\x18\x5f\xe5\x30\xa9\x6f\x82\x1d\xde\x66\xd4\x30\x2b\xab\x6a\x54\x13\x8b\x4d\xd9\xa8\x7e\x4c\xb7\xfd\x4a\xad\xcd\xb4\x7c\x56\x90\xca\x22\xe8\x94\x93\x61\xb1\xda\x77\xcb\xd6\x39\x5b\xd4\x92\x34\xe5\xb6\xd7\x8b\xdf\xd7\xb5\x18\xbf\x15\xef\x86\x40\xa4\x3d\x11\x39\x62\xbf\x31\xe7\xcc\x74\x5a\x15\x78\x87\x19\x1e\x03\x80\xdd\x36\xa0\xbd\x7d\x80\xa7\x8d\xc0\x4a\x76\x02\x2e\xc7\xdd\x30\x3a\xc3\x7a\x52\x73\x54\x29\x40\xc7\xfe\xd3\x72\x12\x42\x17\xae\x71\x4d\x3f\x23\xb5\xb1\x43\x3f\x53\xf9\x65\xac\xac\x2f\x6b\xf0\x6d\xc5\xee\x39\x80\xbd\xd6\xdd\x3f\x95\x6a\xd3\x8d\xe6\x3c\x47\x56\xda\x6f\x23\x52\xbf\xde\x00\x89\x77\x6a\xa4\x56\x36\x09\xa0\x3c\xc2\xcf\xb7\x96\x64\xfb\x62\xab\xdb\x4b\xea\xcb\x3a\xd9\xce\xd9\x6c\xcf\x48\xc5\xf0\xcd\x74\xb1\x38\x89\xf1\xb4\xb6\xf9\x45\x3f\xf3\xfa\xc8\x91\x06\x2e\x37\xa4\xe8\xdf\x23\xc2\x76\x75\xa8\x3c\xb9\x5a\x22\xa4\xba\x49\xf8\x63\x65\x9e\x6d\x73\x45\xd5\x22\x8f\x4f\x3b\x59\x79\xc7\xf1\xf1\xc8\xf0\xdf\x9d\x27\x07\x3b\xc7\xc7\xaa\x04\xe4\x70\xf8\x27\x1a\xfe\x3d\x3c\xb9\xb7\xf3\xe4\xe0\xf8\x78\xb4\xf0\x68\xf7\x3f\x77\x77\x9f\xa8\xe7\xf7\x2a\xcf\x8f\x8f\x87\xc7\xc7\xa3\x93\x7b\xbb\x4f\xee\x66\x0c\xb9\x93\x31\x65\xd9\xe2\x06\xf9\x69\x0f\xca\xb4\xdc\xe6\xf4\xf5\xdf\x01\x00\x00\xff\xff\x05\x80\x78\xc6\x8f\x9d\x00\x00")

func githubComOpctlSpecsOpspecOpfileJsonschemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_githubComOpctlSpecsOpspecOpfileJsonschemaJson,
		"github.com/opctl/specs/opspec/opfile/jsonschema.json",
	)
}

func githubComOpctlSpecsOpspecOpfileJsonschemaJson() (*asset, error) {
	bytes, err := githubComOpctlSpecsOpspecOpfileJsonschemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "github.com/opctl/specs/opspec/opfile/jsonschema.json", size: 40335, mode: os.FileMode(420), modTime: time.Unix(1553974619, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"github.com/opctl/specs/opspec/opfile/jsonschema.json": githubComOpctlSpecsOpspecOpfileJsonschemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"github.com": &bintree{nil, map[string]*bintree{
		"opctl": &bintree{nil, map[string]*bintree{
			"specs": &bintree{nil, map[string]*bintree{
				"opspec": &bintree{nil, map[string]*bintree{
					"opfile": &bintree{nil, map[string]*bintree{
						"jsonschema.json": &bintree{githubComOpctlSpecsOpspecOpfileJsonschemaJson, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
