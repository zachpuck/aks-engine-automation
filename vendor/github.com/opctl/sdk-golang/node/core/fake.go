// Code generated by counterfeiter. DO NOT EDIT.
package core

import (
	"context"
	"sync"

	"github.com/opctl/sdk-golang/model"
)

type Fake struct {
	GetEventStreamStub        func(context.Context, *model.GetEventStreamReq) (<-chan model.Event, <-chan error)
	getEventStreamMutex       sync.RWMutex
	getEventStreamArgsForCall []struct {
		arg1 context.Context
		arg2 *model.GetEventStreamReq
	}
	getEventStreamReturns struct {
		result1 <-chan model.Event
		result2 <-chan error
	}
	getEventStreamReturnsOnCall map[int]struct {
		result1 <-chan model.Event
		result2 <-chan error
	}
	KillOpStub        func(model.KillOpReq)
	killOpMutex       sync.RWMutex
	killOpArgsForCall []struct {
		arg1 model.KillOpReq
	}
	ResolveDataStub        func(context.Context, string, *model.PullCreds) (model.DataHandle, error)
	resolveDataMutex       sync.RWMutex
	resolveDataArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *model.PullCreds
	}
	resolveDataReturns struct {
		result1 model.DataHandle
		result2 error
	}
	resolveDataReturnsOnCall map[int]struct {
		result1 model.DataHandle
		result2 error
	}
	StartOpStub        func(context.Context, model.StartOpReq) (string, error)
	startOpMutex       sync.RWMutex
	startOpArgsForCall []struct {
		arg1 context.Context
		arg2 model.StartOpReq
	}
	startOpReturns struct {
		result1 string
		result2 error
	}
	startOpReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Fake) GetEventStream(arg1 context.Context, arg2 *model.GetEventStreamReq) (<-chan model.Event, <-chan error) {
	fake.getEventStreamMutex.Lock()
	ret, specificReturn := fake.getEventStreamReturnsOnCall[len(fake.getEventStreamArgsForCall)]
	fake.getEventStreamArgsForCall = append(fake.getEventStreamArgsForCall, struct {
		arg1 context.Context
		arg2 *model.GetEventStreamReq
	}{arg1, arg2})
	fake.recordInvocation("GetEventStream", []interface{}{arg1, arg2})
	fake.getEventStreamMutex.Unlock()
	if fake.GetEventStreamStub != nil {
		return fake.GetEventStreamStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getEventStreamReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Fake) GetEventStreamCallCount() int {
	fake.getEventStreamMutex.RLock()
	defer fake.getEventStreamMutex.RUnlock()
	return len(fake.getEventStreamArgsForCall)
}

func (fake *Fake) GetEventStreamCalls(stub func(context.Context, *model.GetEventStreamReq) (<-chan model.Event, <-chan error)) {
	fake.getEventStreamMutex.Lock()
	defer fake.getEventStreamMutex.Unlock()
	fake.GetEventStreamStub = stub
}

func (fake *Fake) GetEventStreamArgsForCall(i int) (context.Context, *model.GetEventStreamReq) {
	fake.getEventStreamMutex.RLock()
	defer fake.getEventStreamMutex.RUnlock()
	argsForCall := fake.getEventStreamArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Fake) GetEventStreamReturns(result1 <-chan model.Event, result2 <-chan error) {
	fake.getEventStreamMutex.Lock()
	defer fake.getEventStreamMutex.Unlock()
	fake.GetEventStreamStub = nil
	fake.getEventStreamReturns = struct {
		result1 <-chan model.Event
		result2 <-chan error
	}{result1, result2}
}

func (fake *Fake) GetEventStreamReturnsOnCall(i int, result1 <-chan model.Event, result2 <-chan error) {
	fake.getEventStreamMutex.Lock()
	defer fake.getEventStreamMutex.Unlock()
	fake.GetEventStreamStub = nil
	if fake.getEventStreamReturnsOnCall == nil {
		fake.getEventStreamReturnsOnCall = make(map[int]struct {
			result1 <-chan model.Event
			result2 <-chan error
		})
	}
	fake.getEventStreamReturnsOnCall[i] = struct {
		result1 <-chan model.Event
		result2 <-chan error
	}{result1, result2}
}

func (fake *Fake) KillOp(arg1 model.KillOpReq) {
	fake.killOpMutex.Lock()
	fake.killOpArgsForCall = append(fake.killOpArgsForCall, struct {
		arg1 model.KillOpReq
	}{arg1})
	fake.recordInvocation("KillOp", []interface{}{arg1})
	fake.killOpMutex.Unlock()
	if fake.KillOpStub != nil {
		fake.KillOpStub(arg1)
	}
}

func (fake *Fake) KillOpCallCount() int {
	fake.killOpMutex.RLock()
	defer fake.killOpMutex.RUnlock()
	return len(fake.killOpArgsForCall)
}

func (fake *Fake) KillOpCalls(stub func(model.KillOpReq)) {
	fake.killOpMutex.Lock()
	defer fake.killOpMutex.Unlock()
	fake.KillOpStub = stub
}

func (fake *Fake) KillOpArgsForCall(i int) model.KillOpReq {
	fake.killOpMutex.RLock()
	defer fake.killOpMutex.RUnlock()
	argsForCall := fake.killOpArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Fake) ResolveData(arg1 context.Context, arg2 string, arg3 *model.PullCreds) (model.DataHandle, error) {
	fake.resolveDataMutex.Lock()
	ret, specificReturn := fake.resolveDataReturnsOnCall[len(fake.resolveDataArgsForCall)]
	fake.resolveDataArgsForCall = append(fake.resolveDataArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *model.PullCreds
	}{arg1, arg2, arg3})
	fake.recordInvocation("ResolveData", []interface{}{arg1, arg2, arg3})
	fake.resolveDataMutex.Unlock()
	if fake.ResolveDataStub != nil {
		return fake.ResolveDataStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.resolveDataReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Fake) ResolveDataCallCount() int {
	fake.resolveDataMutex.RLock()
	defer fake.resolveDataMutex.RUnlock()
	return len(fake.resolveDataArgsForCall)
}

func (fake *Fake) ResolveDataCalls(stub func(context.Context, string, *model.PullCreds) (model.DataHandle, error)) {
	fake.resolveDataMutex.Lock()
	defer fake.resolveDataMutex.Unlock()
	fake.ResolveDataStub = stub
}

func (fake *Fake) ResolveDataArgsForCall(i int) (context.Context, string, *model.PullCreds) {
	fake.resolveDataMutex.RLock()
	defer fake.resolveDataMutex.RUnlock()
	argsForCall := fake.resolveDataArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *Fake) ResolveDataReturns(result1 model.DataHandle, result2 error) {
	fake.resolveDataMutex.Lock()
	defer fake.resolveDataMutex.Unlock()
	fake.ResolveDataStub = nil
	fake.resolveDataReturns = struct {
		result1 model.DataHandle
		result2 error
	}{result1, result2}
}

func (fake *Fake) ResolveDataReturnsOnCall(i int, result1 model.DataHandle, result2 error) {
	fake.resolveDataMutex.Lock()
	defer fake.resolveDataMutex.Unlock()
	fake.ResolveDataStub = nil
	if fake.resolveDataReturnsOnCall == nil {
		fake.resolveDataReturnsOnCall = make(map[int]struct {
			result1 model.DataHandle
			result2 error
		})
	}
	fake.resolveDataReturnsOnCall[i] = struct {
		result1 model.DataHandle
		result2 error
	}{result1, result2}
}

func (fake *Fake) StartOp(arg1 context.Context, arg2 model.StartOpReq) (string, error) {
	fake.startOpMutex.Lock()
	ret, specificReturn := fake.startOpReturnsOnCall[len(fake.startOpArgsForCall)]
	fake.startOpArgsForCall = append(fake.startOpArgsForCall, struct {
		arg1 context.Context
		arg2 model.StartOpReq
	}{arg1, arg2})
	fake.recordInvocation("StartOp", []interface{}{arg1, arg2})
	fake.startOpMutex.Unlock()
	if fake.StartOpStub != nil {
		return fake.StartOpStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.startOpReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Fake) StartOpCallCount() int {
	fake.startOpMutex.RLock()
	defer fake.startOpMutex.RUnlock()
	return len(fake.startOpArgsForCall)
}

func (fake *Fake) StartOpCalls(stub func(context.Context, model.StartOpReq) (string, error)) {
	fake.startOpMutex.Lock()
	defer fake.startOpMutex.Unlock()
	fake.StartOpStub = stub
}

func (fake *Fake) StartOpArgsForCall(i int) (context.Context, model.StartOpReq) {
	fake.startOpMutex.RLock()
	defer fake.startOpMutex.RUnlock()
	argsForCall := fake.startOpArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Fake) StartOpReturns(result1 string, result2 error) {
	fake.startOpMutex.Lock()
	defer fake.startOpMutex.Unlock()
	fake.StartOpStub = nil
	fake.startOpReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *Fake) StartOpReturnsOnCall(i int, result1 string, result2 error) {
	fake.startOpMutex.Lock()
	defer fake.startOpMutex.Unlock()
	fake.StartOpStub = nil
	if fake.startOpReturnsOnCall == nil {
		fake.startOpReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.startOpReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *Fake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getEventStreamMutex.RLock()
	defer fake.getEventStreamMutex.RUnlock()
	fake.killOpMutex.RLock()
	defer fake.killOpMutex.RUnlock()
	fake.resolveDataMutex.RLock()
	defer fake.resolveDataMutex.RUnlock()
	fake.startOpMutex.RLock()
	defer fake.startOpMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Fake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ Core = new(Fake)
