// This file was generated by counterfeiter
package iruntime

import (
	"sync"
)

type Fake struct {
	GOOSStub        func() string
	gOOSMutex       sync.RWMutex
	gOOSArgsForCall []struct{}
	gOOSReturns     struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Fake) GOOS() string {
	fake.gOOSMutex.Lock()
	fake.gOOSArgsForCall = append(fake.gOOSArgsForCall, struct{}{})
	fake.recordInvocation("GOOS", []interface{}{})
	fake.gOOSMutex.Unlock()
	if fake.GOOSStub != nil {
		return fake.GOOSStub()
	}
	return fake.gOOSReturns.result1
}

func (fake *Fake) GOOSCallCount() int {
	fake.gOOSMutex.RLock()
	defer fake.gOOSMutex.RUnlock()
	return len(fake.gOOSArgsForCall)
}

func (fake *Fake) GOOSReturns(result1 string) {
	fake.GOOSStub = nil
	fake.gOOSReturns = struct {
		result1 string
	}{result1}
}

func (fake *Fake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.gOOSMutex.RLock()
	defer fake.gOOSMutex.RUnlock()
	return fake.invocations
}

func (fake *Fake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ IRuntime = new(Fake)
