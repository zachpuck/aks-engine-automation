// Code generated by counterfeiter. DO NOT EDIT.
package core

import (
	"sync"

	"github.com/opctl/sdk-golang/model"
)

type fakeLooper struct {
	LoopStub        func(string, map[string]*model.Value, *model.SCG, model.DataHandle, string) error
	loopMutex       sync.RWMutex
	loopArgsForCall []struct {
		arg1 string
		arg2 map[string]*model.Value
		arg3 *model.SCG
		arg4 model.DataHandle
		arg5 string
	}
	loopReturns struct {
		result1 error
	}
	loopReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *fakeLooper) Loop(arg1 string, arg2 map[string]*model.Value, arg3 *model.SCG, arg4 model.DataHandle, arg5 string) error {
	fake.loopMutex.Lock()
	ret, specificReturn := fake.loopReturnsOnCall[len(fake.loopArgsForCall)]
	fake.loopArgsForCall = append(fake.loopArgsForCall, struct {
		arg1 string
		arg2 map[string]*model.Value
		arg3 *model.SCG
		arg4 model.DataHandle
		arg5 string
	}{arg1, arg2, arg3, arg4, arg5})
	fake.recordInvocation("Loop", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.loopMutex.Unlock()
	if fake.LoopStub != nil {
		return fake.LoopStub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.loopReturns
	return fakeReturns.result1
}

func (fake *fakeLooper) LoopCallCount() int {
	fake.loopMutex.RLock()
	defer fake.loopMutex.RUnlock()
	return len(fake.loopArgsForCall)
}

func (fake *fakeLooper) LoopCalls(stub func(string, map[string]*model.Value, *model.SCG, model.DataHandle, string) error) {
	fake.loopMutex.Lock()
	defer fake.loopMutex.Unlock()
	fake.LoopStub = stub
}

func (fake *fakeLooper) LoopArgsForCall(i int) (string, map[string]*model.Value, *model.SCG, model.DataHandle, string) {
	fake.loopMutex.RLock()
	defer fake.loopMutex.RUnlock()
	argsForCall := fake.loopArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *fakeLooper) LoopReturns(result1 error) {
	fake.loopMutex.Lock()
	defer fake.loopMutex.Unlock()
	fake.LoopStub = nil
	fake.loopReturns = struct {
		result1 error
	}{result1}
}

func (fake *fakeLooper) LoopReturnsOnCall(i int, result1 error) {
	fake.loopMutex.Lock()
	defer fake.loopMutex.Unlock()
	fake.LoopStub = nil
	if fake.loopReturnsOnCall == nil {
		fake.loopReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.loopReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *fakeLooper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.loopMutex.RLock()
	defer fake.loopMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *fakeLooper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
