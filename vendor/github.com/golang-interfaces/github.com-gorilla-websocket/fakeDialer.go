// Code generated by counterfeiter. DO NOT EDIT.
package iwebsocket

import (
	"net/http"
	"sync"

	"github.com/gorilla/websocket"
)

type FakeDialer struct {
	DialStub        func(urlStr string, requestHeader http.Header) (*websocket.Conn, *http.Response, error)
	dialMutex       sync.RWMutex
	dialArgsForCall []struct {
		urlStr        string
		requestHeader http.Header
	}
	dialReturns struct {
		result1 *websocket.Conn
		result2 *http.Response
		result3 error
	}
	dialReturnsOnCall map[int]struct {
		result1 *websocket.Conn
		result2 *http.Response
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDialer) Dial(urlStr string, requestHeader http.Header) (*websocket.Conn, *http.Response, error) {
	fake.dialMutex.Lock()
	ret, specificReturn := fake.dialReturnsOnCall[len(fake.dialArgsForCall)]
	fake.dialArgsForCall = append(fake.dialArgsForCall, struct {
		urlStr        string
		requestHeader http.Header
	}{urlStr, requestHeader})
	fake.recordInvocation("Dial", []interface{}{urlStr, requestHeader})
	fake.dialMutex.Unlock()
	if fake.DialStub != nil {
		return fake.DialStub(urlStr, requestHeader)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.dialReturns.result1, fake.dialReturns.result2, fake.dialReturns.result3
}

func (fake *FakeDialer) DialCallCount() int {
	fake.dialMutex.RLock()
	defer fake.dialMutex.RUnlock()
	return len(fake.dialArgsForCall)
}

func (fake *FakeDialer) DialArgsForCall(i int) (string, http.Header) {
	fake.dialMutex.RLock()
	defer fake.dialMutex.RUnlock()
	return fake.dialArgsForCall[i].urlStr, fake.dialArgsForCall[i].requestHeader
}

func (fake *FakeDialer) DialReturns(result1 *websocket.Conn, result2 *http.Response, result3 error) {
	fake.DialStub = nil
	fake.dialReturns = struct {
		result1 *websocket.Conn
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeDialer) DialReturnsOnCall(i int, result1 *websocket.Conn, result2 *http.Response, result3 error) {
	fake.DialStub = nil
	if fake.dialReturnsOnCall == nil {
		fake.dialReturnsOnCall = make(map[int]struct {
			result1 *websocket.Conn
			result2 *http.Response
			result3 error
		})
	}
	fake.dialReturnsOnCall[i] = struct {
		result1 *websocket.Conn
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeDialer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.dialMutex.RLock()
	defer fake.dialMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDialer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ Dialer = new(FakeDialer)
