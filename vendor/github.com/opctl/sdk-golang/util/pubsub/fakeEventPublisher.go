// Code generated by counterfeiter. DO NOT EDIT.
package pubsub

import (
	"sync"

	"github.com/opctl/sdk-golang/model"
)

type FakeEventPublisher struct {
	PublishStub        func(event model.Event)
	publishMutex       sync.RWMutex
	publishArgsForCall []struct {
		event model.Event
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEventPublisher) Publish(event model.Event) {
	fake.publishMutex.Lock()
	fake.publishArgsForCall = append(fake.publishArgsForCall, struct {
		event model.Event
	}{event})
	fake.recordInvocation("Publish", []interface{}{event})
	fake.publishMutex.Unlock()
	if fake.PublishStub != nil {
		fake.PublishStub(event)
	}
}

func (fake *FakeEventPublisher) PublishCallCount() int {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	return len(fake.publishArgsForCall)
}

func (fake *FakeEventPublisher) PublishArgsForCall(i int) model.Event {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	return fake.publishArgsForCall[i].event
}

func (fake *FakeEventPublisher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEventPublisher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ EventPublisher = new(FakeEventPublisher)
