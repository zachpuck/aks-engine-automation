// Code generated by counterfeiter. DO NOT EDIT.
package contents

import (
	"net/http"
	"sync"

	"github.com/opctl/sdk-golang/model"
)

type FakeHandler struct {
	HandleStub        func(dataHandle model.DataHandle, httpResp http.ResponseWriter, httpReq *http.Request)
	handleMutex       sync.RWMutex
	handleArgsForCall []struct {
		dataHandle model.DataHandle
		httpResp   http.ResponseWriter
		httpReq    *http.Request
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHandler) Handle(dataHandle model.DataHandle, httpResp http.ResponseWriter, httpReq *http.Request) {
	fake.handleMutex.Lock()
	fake.handleArgsForCall = append(fake.handleArgsForCall, struct {
		dataHandle model.DataHandle
		httpResp   http.ResponseWriter
		httpReq    *http.Request
	}{dataHandle, httpResp, httpReq})
	fake.recordInvocation("Handle", []interface{}{dataHandle, httpResp, httpReq})
	fake.handleMutex.Unlock()
	if fake.HandleStub != nil {
		fake.HandleStub(dataHandle, httpResp, httpReq)
	}
}

func (fake *FakeHandler) HandleCallCount() int {
	fake.handleMutex.RLock()
	defer fake.handleMutex.RUnlock()
	return len(fake.handleArgsForCall)
}

func (fake *FakeHandler) HandleArgsForCall(i int) (model.DataHandle, http.ResponseWriter, *http.Request) {
	fake.handleMutex.RLock()
	defer fake.handleMutex.RUnlock()
	return fake.handleArgsForCall[i].dataHandle, fake.handleArgsForCall[i].httpResp, fake.handleArgsForCall[i].httpReq
}

func (fake *FakeHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.handleMutex.RLock()
	defer fake.handleMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ Handler = new(FakeHandler)
